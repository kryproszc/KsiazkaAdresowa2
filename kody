start_time<-Sys.time()

# Loading libraries
library(readxl)
library(writexl)

# Model variables
number_of_simulations<-1000
is_sigma_reestimated<-"YES"
sigma_tail<-1.65

# Loading data
setwd("I:/WOM/Sprawy_bieżące/Krystian_test/Bootstrap_Adam/")

file<-"Mack_4M_MTPL_paid_lognorm.xlsx"

triangle<-as.matrix(read_excel(file,sheet = "triangle", col_names = FALSE))
weight<-as.matrix(read_excel(file,sheet = "weight", col_names = FALSE))

triangle<-triangle[2:nrow(triangle),2:ncol(triangle)]
weight<-weight[2:nrow(weight),2:ncol(weight)]

# Other functions
divide<-function(x,y){
  
  divide<-c()
  
  for(i in 1:length(x)){
    
    if(y[i]==0){
      
      divide[i]<-0
      
    }else{
      
      divide[i]<-x[i]/y[i]
      
    }
    
  }
  
  return(divide)
  
}

# PARAMETRIZATION

a<-nrow(triangle)

#indiv_factors
indiv_factors<-matrix(nrow=a-1,ncol=a-1)

for(k in 1:(a-1)){
  
  indiv_factors[,k]<-divide(x=triangle[1:(a-1),k+1],y=triangle[1:(a-1),k])
  
}

indiv_factors_weighted<-indiv_factors*weight

# develop_factors
develop_factors<-c()

for(k in 1:(a-1)){
  
  develop_factors[k]<-divide(x=sum(triangle[1:(a-1),k]*indiv_factors_weighted[1:(a-1),k]),y=sum(triangle[1:(a-1),k]*weight[,k]))
  
  if(develop_factors[k]==0){
    
    develop_factors[k]<-1
    
  }
  
}

ldf<-develop_factors

# sigma
sigma_base<-c()
sigma<-c()

for(k in 1:(a-1)){
  
  sigma[k]<-sqrt(divide(x=sum(triangle[1:(a-1),k]*weight[,k]*(indiv_factors_weighted[1:(a-1),k]-ldf[k])^2),y=sum(weight[,k])-1))
  
  if(k==a-1){
    
    sigma[k]<-sqrt(min(divide(x=sigma[k-1]^2,y=sigma[k-2])^2,min(sigma[k-1]^2,sigma[k-2]^2)))
    
  }
  
  if(sum(weight[,k])==1){

    sigma[k]<-sigma[k-1]
    
  }else if(sum(weight[,k])==0){

    sigma[k]<-sigma_tail
    
  }
  
}

# MONTE CARLO 

# Bootstrap distribution parameters
ln_mu_bootstrap<-matrix(nrow=a,ncol=a-1)
ln_sd_bootstrap<-matrix(nrow=a,ncol=a-1)

for(k in 1:a){
  
  for(i in 1:(a-1)){
    
    if(triangle[k,i]==0){
      
      ln_mu_bootstrap[k,i]<- -Inf
      ln_sd_bootstrap[k,i]<-0
      
    }else{
  
      ln_mu_bootstrap[k,i]<-log(ldf[i]*triangle[k,i],base=exp(1))-0.5*log((triangle[k,i]*sigma[i]^2)/((ldf[i]*triangle[k,i])^2)+1,base=exp(1))
      ln_sd_bootstrap[k,i]<-sqrt(log((triangle[k,i]*sigma[i]^2)/((ldf[i]*triangle[k,i])^2)+1,base=exp(1)))
      
    }
    
  }
  
}


# Performing simulations

triangle_bootstrap<-list()
indiv_factors_bootstrap<-list()
indiv_factors_bootstrap_weighted<-list()
develop_factors_bootstrap<-list()
ldf_bootstrap<-list()
sigma_bootstrap<-list()
triangle_simu<-list()
ult<-c()

Monte_carlo_progress_bar<-winProgressBar(title="Bootstrap + ultimate loss simulation",min=0,max=number_of_simulations,width=600)

for(n in 1:number_of_simulations){
  
  setWinProgressBar(pb=Monte_carlo_progress_bar,value=n, title=paste("Bootstrap + ultimate loss simulation: ",
                                                                     round((n/number_of_simulations)*100,0),"%"))
  
  # Bootstrap simulations

  triangle_bootstrap[[n]]<-matrix(nrow=a,ncol=a)
  triangle_bootstrap[[n]][,1]<-triangle[,1]
  triangle_bootstrap[[n]][1,]<-triangle[1,]
  
  for(k in 1:a){
    
    for(i in 2:a){
      
      if(k+i<a+2){
        
        if(triangle_bootstrap[[n]][k,i-1]==0){
          
          triangle_bootstrap[[n]][k,i]<-0
          
        }else{
          
          triangle_bootstrap[[n]][k,i]<-rlnorm(n=1,meanlog=ln_mu_bootstrap[k,i-1],sdlog=ln_sd_bootstrap[k,i-1])
          
        }
        
      }else{
        
        triangle_bootstrap[[n]][k,i]<-0
        
      }
      
    }
    
  }
  
  
  # indiv_factors - bootstrap
  indiv_factors_bootstrap[[n]]<-matrix(nrow=a-1,ncol=a-1)
  
  for(k in 1:(a-1)){
    
    indiv_factors_bootstrap[[n]][,k]<-divide(x=triangle_bootstrap[[n]][1:(a-1),k+1],y=triangle[1:(a-1),k])
    
  }
  
  indiv_factors_bootstrap_weighted[[n]]<-indiv_factors_bootstrap[[n]]*weight
  
  
  # develop_factors - bootstrap
  develop_factors_bootstrap[[n]]<-vector()
  
  for(k in 1:(a-1)){
    
    develop_factors_bootstrap[[n]][k]<-divide(x=sum(triangle[1:(a-1),k]*indiv_factors_bootstrap_weighted[[n]][1:(a-1),k]),
                                              y=sum(triangle[1:(a-1),k]*weight[,k]))
    
    if(develop_factors_bootstrap[[n]][k]==0){
      
      develop_factors_bootstrap[[n]][k]<-1
      
    }
    
  }
  
  ldf_bootstrap[[n]]<-develop_factors_bootstrap[[n]]
  
  if(is_sigma_reestimated=="YES"){
  
    # sigma - bootstrap
    sigma_bootstrap[[n]]<-vector()
  
    for(k in 1:(a-1)){
      
        sigma_bootstrap[[n]][k]<-sqrt(divide(x=sum(triangle[1:(a-1),k]*weight[,k]*(indiv_factors_bootstrap_weighted[[n]][1:(a-1),k]-ldf_bootstrap[[n]][k])^2),
                                             y=sum(weight[,k])-1))
    
      if(k==a-1){

        sigma_bootstrap[[n]][k]<-sqrt(min(divide(x=sigma_bootstrap[[n]][k-1]^2,y=sigma_bootstrap[[n]][k-2])^2,min(sigma_bootstrap[[n]][k-1]^2,
                                                                                                                  sigma_bootstrap[[n]][k-2]^2)))
      
      }
    
      if(sum(weight[,k])==1){

        sigma_bootstrap[[n]][k]<-sigma_bootstrap[[n]][k-1]
      
      }else if(sum(weight[,k])==0){

        sigma_bootstrap[[n]][k]<-sigma_tail
      
      }
        
    }
    
  }else{

    sigma_bootstrap[[n]]<-sigma
    
  }
  
  
  # Ultimate loss simulations
  triangle_simu[[n]]<-triangle
  
  for(k in 1:a){
    
    for(i in 1:a){
      
      if(k+i>=a+2){
        
        if(triangle_simu[[n]][k,i-1]==0){
        
          triangle_simu[[n]][k,i]<-0
          
        }else{
          
          triangle_simu[[n]][k,i]<-rlnorm(n=1,meanlog=log(ldf_bootstrap[[n]][i-1]*triangle_simu[[n]][k,i-1],
                                                          base=exp(1))-0.5*log((triangle_simu[[n]][k,i-1]*sigma_bootstrap[[n]][i-1]^2)/((ldf_bootstrap[[n]][i-1]*triangle_simu[[n]][k,i-1])^2)+1,base=exp(1)),
                                          sdlog=sqrt(log((triangle_simu[[n]][k,i-1]*sigma_bootstrap[[n]][i-1]^2)/((ldf_bootstrap[[n]][i-1]*triangle_simu[[n]][k,i-1])^2)+1,base=exp(1))))
          
        }
        
      }
      
    }
    
  }
  
  ult[n]<-sum(triangle_simu[[n]][,a])

}

close(Monte_carlo_progress_bar)


# OUTPUTS
mean(ult)
sd(ult)
hist(ult)
plot(density(ult))

Sys.time()-start_time
