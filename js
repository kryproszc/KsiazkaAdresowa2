// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { RootGetData, CreateUploadFilesUploadPostData, CreateUploadFilesUploadPostError, CalcClCalcClPostData, CalcClCalcClPostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import type {
    CalcUltimateCalcUltimatePostData,
    CalcUltimateCalcUltimatePostError
  } from "./types.gen";
  
  
export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Create Upload Files
 */
export const createUploadFilesUploadPost = <ThrowOnError extends boolean = false>(options: Options<CreateUploadFilesUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateUploadFilesUploadPostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Calc Cl
 */
export const calcClCalcClPost = <ThrowOnError extends boolean = false>(options: Options<CalcClCalcClPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CalcClCalcClPostError, ThrowOnError>({
        url: '/calc/cl',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};


export const calcUltimateCalcUltimatePost = <ThrowOnError extends boolean = false>(
  options: Options<CalcUltimateCalcUltimatePostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, CalcUltimateCalcUltimatePostError, ThrowOnError>({
    url: '/calc/ultimate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};
