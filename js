// This file is auto-generated by @hey-api/openapi-ts

import { type Options, rootGet, createUploadFilesUploadPost, calcClCalcClPost } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { RootGetData, CreateUploadFilesUploadPostData, CreateUploadFilesUploadPostError, CalcClCalcClPostData, CalcClCalcClPostError } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const createUploadFilesUploadPostQueryKey = (options: Options<CreateUploadFilesUploadPostData>) => createQueryKey('createUploadFilesUploadPost', options);

export const createUploadFilesUploadPostOptions = (options: Options<CreateUploadFilesUploadPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUploadFilesUploadPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUploadFilesUploadPostQueryKey(options)
    });
};

export const createUploadFilesUploadPostMutation = (options?: Partial<Options<CreateUploadFilesUploadPostData>>): UseMutationOptions<unknown, CreateUploadFilesUploadPostError, Options<CreateUploadFilesUploadPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateUploadFilesUploadPostError, Options<CreateUploadFilesUploadPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUploadFilesUploadPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const calcClCalcClPostQueryKey = (options: Options<CalcClCalcClPostData>) => createQueryKey('calcClCalcClPost', options);

export const calcClCalcClPostOptions = (options: Options<CalcClCalcClPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await calcClCalcClPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: calcClCalcClPostQueryKey(options)
    });
};

export const calcClCalcClPostMutation = (options?: Partial<Options<CalcClCalcClPostData>>): UseMutationOptions<unknown, CalcClCalcClPostError, Options<CalcClCalcClPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, CalcClCalcClPostError, Options<CalcClCalcClPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await calcClCalcClPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

import { calcUltimateCalcUltimatePost } from "../sdk.gen";
import type {
  CalcUltimateCalcUltimatePostData,
  CalcUltimateCalcUltimatePostError,
} from "../types.gen";

export const calcUltimateCalcUltimatePostMutation = (
  options?: Partial<Options<CalcUltimateCalcUltimatePostData>>
): UseMutationOptions<
  unknown,
  CalcUltimateCalcUltimatePostError,
  Options<CalcUltimateCalcUltimatePostData>
> => {
  return {
    mutationFn: async (localOptions) => {
      const { data } = await calcUltimateCalcUltimatePost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
};
